import React, { useEffect, useState } from "react";
import { useAlertas } from "../../hooks/useAlertas";
import Swal from "sweetalert2";
import { userService } from "../../../client/services/userService";
import "./styles/services.css";
import "./styles/detalles.css";
import "./styles/card-reset.css"; // Importamos el archivo de reset para asegurar los estilos
import "./styles/sweetalert-override.css"; // Importamos estilos específicos para SweetAlert2
import "./styles/swal-dark-override.css"; // Importamos estilos específicos para SweetAlert2 en modo oscuro
import "./styles/swal-icon-spacing.css"; // Importamos estilos específicos para el espaciado de los iconos
import "./styles/swal-buttons.css"; // Importamos estilos específicos para los botones
import "./styles/assign-modal-buttons.css"; // Importamos estilos específicos para los botones del modal de asignación
import "./styles/modal-footer.css"; // Importamos estilos para que el footer tenga el mismo color del formulario
import "./styles/card-buttons.css"; // Importamos estilos específicos para los botones de la tarjeta
import "./styles/add-technician-button.css"; // Importamos estilos específicos para el botón de agregar técnico
import "./styles/export-button.css"; // Importamos estilos específicos para el botón de exportar
import "./styles/servicio-info-modal.css"; // Estilos específicos para el modal de información de servicio
import "./styles/modal-animations.css"; // Animaciones para modales
import "./styles/clean-modal-buttons.css"; // Elimina el fondo gris de los botones
import "./styles/equal-button-width.css"; // Asegura que los botones tengan el mismo ancho
import "./styles/force-dark-modal.css"; // Este debe ser el último CSS importado para asegurar que tenga mayor prioridad

const { getTechnicians: fetchTechnicians } = userService;

// Mapeo de nombres de servicios a español
const serviciosEnEspanol = {
  aire_acondicionado: "Aire Acondicionado",
  pest_control: "Control de Plagas",
  gardening: "Jardinería",
  residential_fumigation: "Fumigación Residencial",
  commercial_fumigation: "Fumigación Comercial",
  "pest-control": "Control de Plagas",
  "residential-fumigation": "Fumigación Residencial",
  "commercial-fumigation": "Fumigación Comercial",
};

const ServicioCard = ({
  servicio,
  onEliminar,
  onAsignarServicio,
  onEditar,
}) => {
  const { mostrarAlerta } = useAlertas();
  const [technicians, setTechnicians] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedTechnicians, setSelectedTechnicians] = useState([]);

  // Función para cargar técnicos
  const fetchAvailableTechnicians = async () => {
    try {
      setLoading(true);
      const data = await fetchTechnicians();
      if (Array.isArray(data)) {
        const activeTechnicians = data.filter(
          (tech) => tech.active !== false && tech.role === "technician"
        );
        setTechnicians(activeTechnicians);
      } else {
        setTechnicians([]);
      }
    } catch (error) {
      console.error("Error fetching technicians:", error);
      setTechnicians([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAvailableTechnicians();
  }, []);

  // Formatear el nombre del servicio
  const formatServiceName = (serviceType) => {
    if (!serviceType) return "Servicio";
    // Usar el mapeo si existe
    return (
      serviciosEnEspanol[serviceType.toLowerCase()] ||
      serviceType
        .replace(/_/g, " ")
        .replace(/-/g, " ")
        .replace(/\b\w/g, (c) => c.toUpperCase())
    );
  };

  // HTML para el modal de asignación
  const getModalHtml = () => {
    const now = new Date();
    const currentHour = now.getHours().toString().padStart(2, "0");
    const currentMinutes = now.getMinutes().toString().padStart(2, "0");

    const technicianOptions = technicians
      .filter(
        (tech) =>
          !selectedTechnicians.some((selected) => selected._id === tech._id)
      )
      .map(
        (tech) =>
          `<option value="${tech._id}">${tech.name || tech.username}</option>`
      )
      .join("");

    return `
      <div class="asignar-form">
        <div class="form-group">
          <label for="fecha" class="form-label">Fecha del servicio</label>
          <input type="date" id="fecha" class="form-control" value="${
            new Date().toISOString().split("T")[0]
          }" required>
        </div>
        
        <div class="form-group time-group">
          <div class="time-input">
            <label for="horaInicio" class="form-label">Hora de inicio</label>
            <input type="time" id="horaInicio" class="form-control" value="${currentHour}:${currentMinutes}" required>
          </div>
          <div class="duration-input">
            <label for="duracion" class="form-label">Duración (minutos)</label>
            <input type="number" id="duracion" class="form-control" value="60" min="30" step="15" required>
          </div>
        </div>

        <div class="form-group" style="margin-bottom: 20px;">
          <label class="form-label">Técnicos Asignados</label>
          <div id="tecnicos-seleccionados-container" class="technicians-container"></div>
        </div>
        
        <div class="form-group technician-select-group">
          <div class="technician-select-wrapper">
            <select id="tecnicoSelect" class="form-control">
              <option value="">Seleccionar técnico...</option>
              ${technicianOptions}
            </select>
            <button type="button" id="addTechnician" class="add-technician-btn" title="Agregar técnico">
              <i class="fas fa-plus"></i>
            </button>
          </div>
        </div>
      </div>
    `;
  };

  const handleAsignar = async () => {
    // No reiniciar la lista de técnicos aquí para mantener las selecciones previas
    // Verificar si estamos en modo oscuro
    const isDarkMode = document.body.classList.contains("dark-theme");

    const mostrarModal = async () => {
      // Movemos la definición de localSelectedTechnicians fuera de didOpen
      // para que sea accesible en preConfirm
      let localSelectedTechnicians = [...selectedTechnicians];

      // Mostrar el modal con SweetAlert2
      const result = await Swal.fire({
        title: "Asignar servicio a técnicos",
        html: `
          <div class="detalles-servicio mb-2" style="background-color: ${
            isDarkMode ? "#2c2e35" : "#f8f9fa"
          }; color: ${
          isDarkMode ? "#fff" : "#333"
        }; border-radius: 4px; padding: 0.5rem;">
            <p class="mb-1"><strong style="color: ${
              isDarkMode ? "#87c947" : "#004122"
            };">Cliente:</strong> <span style="color: ${
          isDarkMode ? "#fff" : "#333"
        };">${servicio.clientName}</span></p>
            <p class="mb-1"><strong style="color: ${
              isDarkMode ? "#87c947" : "#004122"
            };">Dirección:</strong> <span style="color: ${
          isDarkMode ? "#fff" : "#333"
        };">${servicio.address}</span></p>
            <p class="mb-1"><strong style="color: ${
              isDarkMode ? "#87c947" : "#004122"
            };">Descripción:</strong> <span style="color: ${
          isDarkMode ? "#fff" : "#333"
        };">${servicio.descripcion}</span></p>
          </div>
          <form id="asignarForm" style="margin-top: 0.5rem;">
            
            <div class="mb-2">
              <label class="form-label mb-1" style="color: #87c947; font-weight: 500; font-size: 0.9rem;">Fecha</label>
              <input type="date" id="fecha" class="form-control" value="${
                new Date().toISOString().split("T")[0]
              }" style="background-color: ${
          isDarkMode ? "#2c2e35" : "#fff"
        }; color: ${isDarkMode ? "#fff" : "#333"}; border-color: ${
          isDarkMode ? "#444" : "#ced4da"
        };">
            </div>
            
            <div style="display: flex; gap: 10px;">
              <div class="mb-2" style="flex: 1;">
                <label class="form-label mb-1" style="color: #87c947; font-weight: 500; font-size: 0.9rem;">Hora de inicio</label>
                <input type="time" id="horaInicio" class="form-control" value="${new Date()
                  .getHours()
                  .toString()
                  .padStart(2, "0")}:${new Date()
          .getMinutes()
          .toString()
          .padStart(2, "0")}" style="background-color: ${
          isDarkMode ? "#2c2e35" : "#fff"
        }; color: ${isDarkMode ? "#fff" : "#333"}; border-color: ${
          isDarkMode ? "#444" : "#ced4da"
        };">
              </div>
              <div class="mb-2" style="flex: 1;">
                <label class="form-label mb-1" style="color: #87c947; font-weight: 500; font-size: 0.9rem;">Duración (min)</label>
                <input type="number" id="duracion" class="form-control" value="60" min="30" step="15" style="background-color: ${
                  isDarkMode ? "#2c2e35" : "#fff"
                }; color: ${isDarkMode ? "#fff" : "#333"}; border-color: ${
          isDarkMode ? "#444" : "#ced4da"
        };">
              </div>
            </div>
          </form>
        `,
        confirmButtonText: '<i class="fas fa-calendar-check"></i> Asignar',
        cancelButtonText: '<i class="fas fa-times"></i> Cancelar',
        showCancelButton: true,
        confirmButtonColor: "#87c947",
        cancelButtonColor: isDarkMode ? "#444" : "#e7e7e7",
        customClass: {
          popup: isDarkMode ? "dark-modal" : "",
        },
        background: isDarkMode ? "#212529" : "#ffffff",
        color: isDarkMode ? "#ffffff" : "#212529",
        didOpen: () => {
          // Actualizar la lista de técnicos seleccionados en la UI
          const updateTechniciansList = () => {
            const selectedTechniciansContainer = document.getElementById(
              "selectedTechnicians"
            );
            if (!selectedTechniciansContainer) return;

            selectedTechniciansContainer.innerHTML = localSelectedTechnicians
              .map(
                (tech) => `
              <div class="selected-tech" style="background-color: ${
                isDarkMode ? "#3a3f48" : "#e9f5d8"
              }; color: ${
                  isDarkMode ? "#fff" : "#004122"
                }; padding: 3px 10px; border-radius: 50px; display: flex; align-items: center; font-size: 0.85rem;">
                <span>${tech.name}</span>
                <button type="button" class="remove-technician" data-id="${
                  tech._id
                }" style="background: none; border: none; color: ${
                  isDarkMode ? "#ff6b6b" : "#e74c3c"
                }; margin-left: 5px; cursor: pointer; display: flex; align-items: center; padding: 0 2px;">
                  <i class="fas fa-times-circle"></i>
                </button>
              </div>
            `
              )
              .join("");

            // Actualizar las opciones del selector de técnicos
            const tecnicoSelect = document.getElementById("tecnicoSelect");
            if (tecnicoSelect) {
              tecnicoSelect.innerHTML = `
                <option value="">Seleccionar técnico...</option>
                ${technicians
                  .filter(
                    (tech) =>
                      !localSelectedTechnicians.some((t) => t._id === tech._id)
                  )
                  .map(
                    (tech) =>
                      `<option value="${tech._id}">${tech.name}</option>`
                  )
                  .join("")}
              `;
            }

            // Agregar eventos a los nuevos botones de eliminar
            document.querySelectorAll(".remove-technician").forEach((btn) => {
              btn.addEventListener("click", function (e) {
                e.stopPropagation(); // Evitar que el evento burbujee
                const techId = this.getAttribute("data-id");

                // Actualizar la lista local
                localSelectedTechnicians = localSelectedTechnicians.filter(
                  (tech) => tech._id !== techId
                );

                // Actualizar el estado de React para mantener sincronizada la información
                setSelectedTechnicians([...localSelectedTechnicians]);

                // Actualizar la UI inmediatamente
                updateTechniciansList();
              });
            });
          };

          // Manejar el evento de agregar técnico
          const addTechnicianButton = document.getElementById("addTechnician");
          if (addTechnicianButton) {
            addTechnicianButton.addEventListener("click", () => {
              const select = document.getElementById("tecnicoSelect");
              const techId = select.value;

              if (!techId) return;

              const techName = select.options[select.selectedIndex].text;
              const newSelectedTech = { _id: techId, name: techName };

              // Verificar que no esté ya seleccionado (doble verificación)
              if (
                !localSelectedTechnicians.some((tech) => tech._id === techId)
              ) {
                // Agregar a la lista local
                localSelectedTechnicians.push(newSelectedTech);

                // Actualizar el estado de React para mantener sincronizada la información
                setSelectedTechnicians([...localSelectedTechnicians]);

                // Actualizar la UI inmediatamente
                updateTechniciansList();
              }
            });
          }

          // Inicializar la lista al abrir el modal
          updateTechniciansList();
        },
        preConfirm: () => {
          const fecha = document.getElementById("fecha").value;
          const horaInicio = document.getElementById("horaInicio").value;
          const duracion = document.getElementById("duracion").value;

          // Validación mínima
          if (!fecha || !horaInicio || !duracion) {
            Swal.showValidationMessage(
              "Por favor complete todos los campos de fecha y hora"
            );
            return false;
          }

          // Verificar que hay al menos un técnico seleccionado
          // Ahora localSelectedTechnicians está accesible aquí
          if (
            !localSelectedTechnicians ||
            localSelectedTechnicians.length === 0
          ) {
            Swal.showValidationMessage("Debe seleccionar al menos un técnico");
            return false;
          }

          // IMPORTANTE: Sincronizar el estado de React con la variable local antes de continuar
          setSelectedTechnicians([...localSelectedTechnicians]);

          return {
            fecha,
            horaInicio,
            duracion,
            tecnicosSeleccionados: [...localSelectedTechnicians],
          };
        },
      });

      return result;
    };

    const result = await mostrarModal();

    // Solo proceder con la asignación si el usuario confirmó el modal
    if (!result || !result.isConfirmed) {
      console.log(
        "Modal cancelado o cerrado sin confirmación. No se realizará asignación."
      );
      return; // Salir de la función para no ejecutar nada más
    }

    // Obtener los valores del formulario
    const formValues = result.value;

    // Si llegamos aquí, el usuario confirmó el modal
    console.log("Modal confirmado, procediendo con la asignación de servicio");
    const { fecha, horaInicio, duracion, tecnicosSeleccionados } = formValues;

    // Si no hay fecha o técnicos seleccionados, no hacer nada
    if (!fecha || !tecnicosSeleccionados || !tecnicosSeleccionados.length) {
      console.error("Datos incompletos para asignación:", formValues);
      return mostrarAlerta({
        title: "Error",
        text: "Por favor seleccione fecha y técnicos para asignar el servicio",
        icon: "error",
      });
    }

    try {
      setLoading(true);
      
      // Crear objeto de fecha y hora para el servicio
      const fechaServicio = new Date(fecha);
      const [horas, minutos] = horaInicio.split(":");
      fechaServicio.setHours(parseInt(horas), parseInt(minutos), 0, 0);
      
      // Calcular fecha de fin basada en la duración
      const fechaFinServicio = new Date(fechaServicio);
      fechaFinServicio.setMinutes(
        fechaFinServicio.getMinutes() + parseInt(duracion)
      );

      // Preparar la solicitud
      const updatedService = {
        ...servicio,
        status: "assigned", // Cambiar estado a asignado
        scheduledDate: fechaServicio.toISOString(),
        scheduledEndDate: fechaFinServicio.toISOString(),
        duration: parseInt(duracion),
        technician: tecnicosSeleccionados[0]._id, // Primer técnico como principal
        technicians: tecnicosSeleccionados.map((t) => t._id), // Lista de todos los técnicos
      };

      // Llamar a la función de asignación pasada como prop
      const result = await onAsignarServicio(servicio._id, updatedService);

      if (result?.success) {
        await mostrarAlerta({
          title: "¡Servicio asignado!",
          text: `Se ha asignado el servicio correctamente para el ${new Date(
            fechaServicio
          ).toLocaleDateString()} a las ${horaInicio}`,
          icon: "success",
        });
      } else {
        throw new Error(result?.message || "Error al asignar el servicio");
      }
    } catch (error) {
      console.error("Error asignando servicio:", error);
      mostrarAlerta({
        title: "Error",
        text: `No se pudo asignar el servicio: ${error.message}`,
        icon: "error",
      });
    } finally {
      setLoading(false);
    }
  };

  // Renderización condicional según el estado
  return (
    <div className={`servicio-card ${servicio.status}`}>
      <div className="servicio-info">
        <div className="servicio-header">
          <h3 className="servicio-title">
            {formatServiceName(servicio.serviceType)}
          </h3>
          <span className={`status-badge ${servicio.status}`}>
            {servicio.status === "pending"
              ? "Pendiente"
              : servicio.status === "assigned"
              ? "Asignado"
              : servicio.status === "completed"
              ? "Completado"
              : servicio.status === "cancelled"
              ? "Cancelado"
              : servicio.status}
          </span>
        </div>
        <div className="client-info">
          <p>
            <strong>Cliente:</strong> {servicio.name || servicio.clientName || "Sin nombre"}
          </p>
          <p>
            <strong>Dirección:</strong> {servicio.address || "No especificada"}
          </p>
          <p>
            <strong>Fecha solicitada:</strong>{" "}
            {servicio.preferredDate
              ? new Date(servicio.preferredDate).toLocaleDateString()
              : "No especificada"}
          </p>
        </div>
      </div>

      <div className="servicio-actions">
        <button
          className="action-btn edit-btn"
          onClick={onEditar}
          disabled={loading}
          title="Editar servicio"
        >
          <i className="fas fa-edit"></i>
        </button>
        <button
          className="action-btn assign-btn"
          onClick={handleAsignar}
          disabled={loading}
          title="Asignar técnico"
        >
          <i className="fas fa-user-plus"></i>
        </button>
        <button
          className="action-btn delete-btn"
          onClick={onEliminar}
          disabled={loading}
          title="Eliminar servicio"
        >
          <i className="fas fa-trash-alt"></i>
        </button>
      </div>
    </div>
  );
};

export default ServicioCard;
