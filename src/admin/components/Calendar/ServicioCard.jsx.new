import React, { useEffect, useState } from "react";
import { useAlertas } from "../../hooks/useAlertas";
import Swal from "sweetalert2";
import { userService } from "../../../client/services/userService";
import "./styles/services.css";
import "./styles/detalles.css";
import "./styles/card-reset.css"; // Importamos el archivo de reset para asegurar los estilos
import "./styles/sweetalert-override.css"; // Importamos estilos específicos para SweetAlert2
import "./styles/swal-dark-override.css"; // Importamos estilos específicos para SweetAlert2 en modo oscuro
import "./styles/swal-icon-spacing.css"; // Importamos estilos específicos para el espaciado de los iconos
import "./styles/swal-buttons.css"; // Importamos estilos específicos para los botones
import "./styles/assign-modal-buttons.css"; // Importamos estilos específicos para los botones del modal de asignación
import "./styles/modal-footer.css"; // Importamos estilos para que el footer tenga el mismo color del formulario
import "./styles/force-dark-modal.css"; // Este debe ser el último CSS importado para asegurar que tenga mayor prioridad

const { getTechnicians: fetchTechnicians } = userService;

// Mapeo de nombres de servicios a español
const serviciosEnEspanol = {
  aire_acondicionado: "Aire Acondicionado",
  pest_control: "Control de Plagas",
  gardening: "Jardinería",
  residential_fumigation: "Fumigación Residencial",
  commercial_fumigation: "Fumigación Comercial",
  "pest-control": "Control de Plagas",
  "residential-fumigation": "Fumigación Residencial",
  "commercial-fumigation": "Fumigación Comercial",
};

const ServicioCard = ({ servicio, onEliminar, onAsignarServicio }) => {
  const { mostrarAlerta } = useAlertas();
  const [technicians, setTechnicians] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedTechnicians, setSelectedTechnicians] = useState([]);

  // Función para cargar técnicos
  const fetchAvailableTechnicians = async () => {
    try {
      setLoading(true);
      const data = await fetchTechnicians();
      if (Array.isArray(data)) {
        const activeTechnicians = data.filter(
          (tech) => tech.active !== false && tech.role === "technician"
        );
        setTechnicians(activeTechnicians);
      } else {
        setTechnicians([]);
      }
    } catch (error) {
      console.error("Error fetching technicians:", error);
      setTechnicians([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAvailableTechnicians();
  }, []);

  // Formatear el nombre del servicio
  const formatServiceName = (serviceType) => {
    if (!serviceType) return "Servicio";
    // Usar el mapeo si existe
    return (
      serviciosEnEspanol[serviceType.toLowerCase()] ||
      serviceType
        .replace(/_/g, " ")
        .replace(/-/g, " ")
        .replace(/\b\w/g, (c) => c.toUpperCase())
    );
  };

  const handleClick = () => {
    // Mostrar detalles completos del servicio
    mostrarAlerta({
      title: `${formatServiceName(servicio.serviceType)}`,
      html: `
        <div class="detalles-servicio">
          <div class="detalles-row">
            <div class="detalles-label">Cliente:</div>
            <div class="detalles-value">${servicio.clientName}</div>
          </div>
          <div class="detalles-row">
            <div class="detalles-label">Email:</div>
            <div class="detalles-value">${servicio.clientEmail || "No disponible"
        }</div>
          </div>
          <div class="detalles-row">
            <div class="detalles-label">Teléfono:</div>
            <div class="detalles-value">${servicio.clientPhone || "No disponible"
        }</div>
          </div>
          <div class="detalles-row">
            <div class="detalles-label">Dirección:</div>
            <div class="detalles-value">${servicio.address || "No disponible"}</div>
          </div>
          <div class="detalles-row">
            <div class="detalles-label">Descripción:</div>
            <div class="detalles-value">${servicio.descripcion ||
          servicio.description ||
          "Sin descripción"
        }</div>
          </div>
        </div>
      `,
      showCancelButton: true,
      showDenyButton: true,
      confirmButtonColor: "#87c947",
      cancelButtonColor: "#e74c3c",
      denyButtonColor: "#3085d6",
      confirmButtonText: '<i class="fas fa-calendar-plus"></i> Asignar',
      denyButtonText: '<i class="fas fa-edit"></i> Editar',
      cancelButtonText: '<i class="fas fa-trash"></i> Eliminar',
    }).then((result) => {
      if (result.isConfirmed) {
        // Asignar servicio
        handleAsignar();
      } else if (result.isDismissed && result.dismiss === "cancel") {
        // Eliminar servicio
        onEliminar();
      } else if (result.isDenied) {
        // Editar servicio - por implementar
        console.log("Editar servicio - funcionalidad por implementar");
      }
    });
  };

  const renderTechniciansList = () => {
    return (
      <div id="tecnicos-seleccionados" className="tecnicos-container">
        <div className="tecnicos-header">
          <span>Técnicos Seleccionados</span>
        </div>
        <div className="tecnicos-list">
          {selectedTechnicians.length > 0 ? (
            selectedTechnicians.map((tech) => (
              <div key={tech._id} className="tecnico-item">
                <span className="tecnico-name">{tech.name}</span>
                <button
                  className="remove-tecnico"
                  onClick={() =>
                    setSelectedTechnicians(
                      selectedTechnicians.filter((t) => t._id !== tech._id)
                    )
                  }
                >
                  <i className="fas fa-times"></i>
                </button>
              </div>
            ))
          ) : (
            <div className="no-tecnicos">No hay técnicos seleccionados</div>
          )}
        </div>
      </div>
    );
  };

  // HTML para el modal de asignación
  const getModalHtml = () => {
    const now = new Date();
    const currentHour = now.getHours().toString().padStart(2, "0");
    const currentMinutes = now.getMinutes().toString().padStart(2, "0");

    const technicianOptions = technicians
      .filter(
        (tech) => !selectedTechnicians.some((selected) => selected._id === tech._id)
      )
      .map(
        (tech) => `<option value="${tech._id}">${tech.name || tech.username}</option>`
      )
      .join("");

    return `
      <div class="asignar-form">
        <div class="form-group">
          <label for="fecha" class="form-label">Fecha del servicio</label>
          <input type="date" id="fecha" class="form-control" value="${new Date().toISOString().split("T")[0]}" required>
        </div>
        
        <div class="form-group time-group">
          <div class="time-input">
            <label for="horaInicio" class="form-label">Hora de inicio</label>
            <input type="time" id="horaInicio" class="form-control" value="${currentHour}:${currentMinutes}" required>
          </div>
          <div class="duration-input">
            <label for="duracion" class="form-label">Duración (minutos)</label>
            <input type="number" id="duracion" class="form-control" value="60" min="30" step="15" required>
          </div>
        </div>

        <div class="form-group" style="margin-bottom: 20px;">
          <label class="form-label">Técnicos Asignados</label>
          <div id="tecnicos-seleccionados-container" class="technicians-container"></div>
        </div>
        
        <div class="form-group technician-select-group">
          <div class="select-container">
            <select id="tecnicoSelect" class="form-control">
              <option value="">Seleccionar técnico...</option>
              ${technicianOptions}
            </select>
          </div>
          <button type="button" id="addTechnician" class="add-technician-btn">
            <i class="fas fa-plus"></i> Añadir Técnico
          </button>
        </div>
      </div>
    `;
  };

  const handleAsignar = async () => {
    // No reiniciar la lista de técnicos aquí para mantener las selecciones previas
    // Verificar si estamos en modo oscuro
    const isDarkMode = document.body.classList.contains("dark-theme");

    const mostrarModal = async () => {
      // Movemos la definición de localSelectedTechnicians fuera de didOpen
      // para que sea accesible en preConfirm
      let localSelectedTechnicians = [...selectedTechnicians];

      // Mostrar el modal con SweetAlert2
      const formValues = await Swal.fire({
        title: "Asignar servicio a técnicos",
        html: `
          <div class="detalles-servicio mb-2" style="background-color: ${
          isDarkMode ? "#2c2e35" : "#f8f9fa"
          }; color: ${
          isDarkMode ? "#fff" : "#333"
          }; border-radius: 4px; padding: 0.5rem;">
            <p class="mb-1"><strong style="color: ${
          isDarkMode ? "#87c947" : "#004122"
          };">Cliente:</strong> <span style="color: ${
          isDarkMode ? "#fff" : "#333"
          };">${servicio.clientName}</span></p>
            <p class="mb-1"><strong style="color: ${
          isDarkMode ? "#87c947" : "#004122"
          };">Dirección:</strong> <span style="color: ${
          isDarkMode ? "#fff" : "#333"
          };">${servicio.address}</span></p>
            <p class="mb-1"><strong style="color: ${
          isDarkMode ? "#87c947" : "#004122"
          };">Descripción:</strong> <span style="color: ${
          isDarkMode ? "#fff" : "#333"
          };">${servicio.descripcion}</span></p>
          </div>
          <form id="asignarForm" style="margin-top: 0.5rem;">
            <div class="mb-2">
              <label class="form-label mb-1" style="color: #87c947; font-weight: 500; font-size: 0.9rem;">Técnico</label>
              <div style="display: flex; gap: 8px; margin-bottom: 10px;">
                <select id="tecnicoSelect" class="form-control" style="background-color: ${
          isDarkMode ? "#2c2e35" : "#fff"
          }; color: ${isDarkMode ? "#fff" : "#333"}; border-color: ${
          isDarkMode ? "#444" : "#ced4da"
          }; padding: 0.4rem 0.75rem; font-size: 0.9rem; flex-grow: 1;">
                  <option value="">Seleccionar técnico...</option>
                  ${technicians
            .filter(
              (tech) =>
                !localSelectedTechnicians.some((t) => t._id === tech._id)
            )
            .map(
              (tech) =>
                `<option value="${tech._id}">${tech.name || tech.username}</option>`
            )
            .join("")}
                </select>
                <button id="addTechnician" type="button" style="background-color: #87c947; color: white; border: none; border-radius: 4px; padding: 0 1rem; display: flex; align-items: center; justify-content: center;">
                  <i class="fas fa-plus" style="margin-right: 0.25rem;"></i> Añadir
                </button>
              </div>
              <div id="selectedTechnicians" style="margin-top: 0.5rem; display: flex; flex-wrap: wrap; gap: 6px;">
                ${localSelectedTechnicians
            .map(
              (tech) => `
                  <div class="selected-tech" style="background-color: ${
                isDarkMode ? "#2c2e35" : "#e9f5d8"
                }; color: ${
                isDarkMode ? "#fff" : "#004122"
                }; padding: 3px 10px; border-radius: 50px; display: flex; align-items: center; font-size: 0.85rem;">
                    <span>${tech.name}</span>
                    <button type="button" class="remove-technician" data-id="${
                tech._id
                }" style="background: none; border: none; color: ${
                isDarkMode ? "#ff6b6b" : "#e74c3c"
                }; margin-left: 5px; cursor: pointer; display: flex; align-items: center; padding: 0 2px;">
                      <i class="fas fa-times-circle"></i>
                    </button>
                  </div>
                `
            )
            .join("")}
              </div>
            </div>
            
            <div class="mb-2">
              <label class="form-label mb-1" style="color: #87c947; font-weight: 500; font-size: 0.9rem;">Fecha</label>
              <input type="date" id="fecha" class="form-control" value="${new Date()
            .toISOString()
            .split("T")[0]}" style="background-color: ${
          isDarkMode ? "#2c2e35" : "#fff"
          }; color: ${isDarkMode ? "#fff" : "#333"}; border-color: ${
          isDarkMode ? "#444" : "#ced4da"
          };">
            </div>
            
            <div style="display: flex; gap: 10px;">
              <div class="mb-2" style="flex: 1;">
                <label class="form-label mb-1" style="color: #87c947; font-weight: 500; font-size: 0.9rem;">Hora de inicio</label>
                <input type="time" id="horaInicio" class="form-control" value="${
          new Date().getHours().toString().padStart(2, "0")
          }:${new Date().getMinutes().toString().padStart(2, "0")}" style="background-color: ${
          isDarkMode ? "#2c2e35" : "#fff"
          }; color: ${isDarkMode ? "#fff" : "#333"}; border-color: ${
          isDarkMode ? "#444" : "#ced4da"
          };">
              </div>
              <div class="mb-2" style="flex: 1;">
                <label class="form-label mb-1" style="color: #87c947; font-weight: 500; font-size: 0.9rem;">Duración (min)</label>
                <input type="number" id="duracion" class="form-control" value="60" min="30" step="15" style="background-color: ${
          isDarkMode ? "#2c2e35" : "#fff"
          }; color: ${isDarkMode ? "#fff" : "#333"}; border-color: ${
          isDarkMode ? "#444" : "#ced4da"
          };">
              </div>
            </div>
          </form>
        `,
        confirmButtonText: '<i class="fas fa-calendar-check"></i> Asignar',
        cancelButtonText: '<i class="fas fa-times"></i> Cancelar',
        showCancelButton: true,
        confirmButtonColor: "#87c947",
        cancelButtonColor: isDarkMode ? "#444" : "#e7e7e7",
        customClass: {
          popup: isDarkMode ? "dark-modal" : "",
        },
        background: isDarkMode ? "#212529" : "#ffffff",
        color: isDarkMode ? "#ffffff" : "#212529",
        didOpen: () => {
          // Actualizar la lista de técnicos seleccionados en la UI
          const updateTechniciansList = () => {
            const selectedTechniciansContainer = document.getElementById(
              "selectedTechnicians"
            );
            if (!selectedTechniciansContainer) return;

            selectedTechniciansContainer.innerHTML = localSelectedTechnicians
              .map(
                (tech) => `
              <div class="selected-tech" style="background-color: ${
                  isDarkMode ? "#2c2e35" : "#e9f5d8"
                  }; color: ${
                  isDarkMode ? "#fff" : "#004122"
                  }; padding: 3px 10px; border-radius: 50px; display: flex; align-items: center; font-size: 0.85rem;">
                <span>${tech.name}</span>
                <button type="button" class="remove-technician" data-id="${
                  tech._id
                  }" style="background: none; border: none; color: ${
                  isDarkMode ? "#ff6b6b" : "#e74c3c"
                  }; margin-left: 5px; cursor: pointer; display: flex; align-items: center; padding: 0 2px;">
                  <i class="fas fa-times-circle"></i>
                </button>
              </div>
            `
              )
              .join("");

            // Actualizar las opciones del selector de técnicos
            const tecnicoSelect = document.getElementById("tecnicoSelect");
            if (tecnicoSelect) {
              tecnicoSelect.innerHTML = `
                <option value="">Seleccionar técnico...</option>
                ${technicians
                  .filter(
                    (tech) =>
                      !localSelectedTechnicians.some((t) => t._id === tech._id)
                  )
                  .map(
                    (tech) =>
                      `<option value="${tech._id}">${tech.name}</option>`
                  )
                  .join("")}
              `;
            }

            // Agregar eventos a los nuevos botones de eliminar
            document.querySelectorAll(".remove-technician").forEach((btn) => {
              btn.addEventListener("click", function (e) {
                e.stopPropagation(); // Evitar que el evento burbujee
                const techId = this.getAttribute("data-id");

                // Actualizar la lista local
                localSelectedTechnicians = localSelectedTechnicians.filter(
                  (tech) => tech._id !== techId
                );

                // Actualizar el estado de React para mantener sincronizada la información
                setSelectedTechnicians([...localSelectedTechnicians]);

                // Actualizar la UI inmediatamente
                updateTechniciansList();
              });
            });
          };

          // Manejar el evento de agregar técnico
          const addTechnicianButton = document.getElementById("addTechnician");
          if (addTechnicianButton) {
            addTechnicianButton.addEventListener("click", () => {
              const select = document.getElementById("tecnicoSelect");
              const techId = select.value;

              if (!techId) return;

              const techName = select.options[select.selectedIndex].text;
              const newSelectedTech = { _id: techId, name: techName };

              // Verificar que no esté ya seleccionado (doble verificación)
              if (
                !localSelectedTechnicians.some((tech) => tech._id === techId)
              ) {
                // Agregar a la lista local
                localSelectedTechnicians.push(newSelectedTech);

                // Actualizar el estado de React para mantener sincronizada la información
                setSelectedTechnicians([...localSelectedTechnicians]);

                // Actualizar la UI inmediatamente
                updateTechniciansList();
              }
            });
          }

          // Inicializar la lista al abrir el modal
          updateTechniciansList();
        },
        preConfirm: () => {
          const fecha = document.getElementById("fecha").value;
          const horaInicio = document.getElementById("horaInicio").value;
          const duracion = document.getElementById("duracion").value;

          // Validación mínima
          if (!fecha || !horaInicio || !duracion) {
            Swal.showValidationMessage(
              "Por favor complete todos los campos de fecha y hora"
            );
            return false;
          }

          // Verificar que hay al menos un técnico seleccionado
          // Ahora localSelectedTechnicians está accesible aquí
          if (
            !localSelectedTechnicians ||
            localSelectedTechnicians.length === 0
          ) {
            Swal.showValidationMessage("Debe seleccionar al menos un técnico");
            return false;
          }

          // IMPORTANTE: Sincronizar el estado de React con la variable local antes de continuar
          setSelectedTechnicians([...localSelectedTechnicians]);

          return {
            fecha,
            horaInicio,
            duracion,
            tecnicosSeleccionados: [...localSelectedTechnicians],
          };
        },
      });

      return formValues;
    };

    const formValues = await mostrarModal();

    // Solo proceder con la asignación si el usuario confirmó el modal
    if (!formValues || !formValues.isConfirmed) {
      console.log("Modal cancelado o cerrado sin confirmación. No se realizará asignación.");
      return; // Salir de la función para no ejecutar nada más
    }
    
    // Si llegamos aquí, el usuario confirmó el modal
    console.log("Modal confirmado, procediendo con la asignación de servicio");
    const { fecha, horaInicio, duracion, tecnicosSeleccionados } = formValues;

    // Usamos los técnicos seleccionados que nos devolvió el modal
    // Si no hay tecnicosSeleccionados, usamos el estado React actual como respaldo
    const tecnicos = tecnicosSeleccionados || selectedTechnicians;

    // Crear un evento en el calendario para cada técnico seleccionado
    const resultados = [];

    // Guardamos la cantidad de técnicos para mostrar mensaje correcto
    const cantidadTecnicos = tecnicos.length;

    console.log("Asignando servicios a técnicos:", {
      cantidad: cantidadTecnicos,
      tecnicos: tecnicos,
      fecha,
      horaInicio,
      duracion,
    });

    for (const tecnico of tecnicos) {
      // Create calendar event
      const fechaInicio = new Date(`${fecha}T${horaInicio}`);
      const fechaFin = new Date(
        fechaInicio.getTime() + parseInt(duracion) * 60000
      );

      const eventoCalendario = {
        id: servicio._id || servicio.id, // Usar el ID real del servicio
        title: `${servicio.nombre} - ${servicio.clientName}`,
        start: fechaInicio.toISOString(),
        end: fechaFin.toISOString(),
        resourceId: tecnico._id,
        backgroundColor: "#87c947",
        borderColor: "#87c947",
        className: "estado-confirmado", // Agregar la clase para el estilo
        textColor: "white",
        display: "block",
        extendedProps: {
          estado: "confirmado",
          status: "confirmed",
          descripcion: servicio.descripcion,
          description: servicio.descripcion,
          cliente: servicio.clientName,
          clientName: servicio.clientName,
          telefono: servicio.clientPhone,
          clientPhone: servicio.clientPhone,
          email: servicio.clientEmail,
          clientEmail: servicio.clientEmail,
          direccion: servicio.address,
          address: servicio.address,
          serviceId: servicio._id || servicio.id,
        },
      };

      // Asegurarnos de usar el ID correcto del servicio
      const serviceId = servicio._id || servicio.id;

      // Guardar técnicos seleccionados para enviar al backend
      // Usamos los técnicos del bucle actual (tecnicos) en lugar de selectedTechnicians
      const technicianIds = tecnicos.map((tech) => tech._id);

      // Agregar el técnico actual como técnico principal para este evento específico
      eventoCalendario.technicianIds = technicianIds;

      console.log("Configurando evento para técnico:", {
        tecnico: tecnico.name,
        tecnicoId: tecnico._id,
        technicianIds,
        serviceId,
      });

      try {
        // Asignar servicio con el técnico actual como principal
        const resultado = await onAsignarServicio(
          eventoCalendario,
          serviceId,
          technicianIds
        );
        resultados.push(resultado);
      } catch (error) {
        console.error(
          "Error al asignar servicio al técnico:",
          tecnico.name,
          error
        );
      }
    }

    // Verificar si todas las asignaciones fueron exitosas
    const todasExitosas = resultados.every((res) => res === true);
    
    // Mensaje personalizado según la cantidad de técnicos
    let mensajeExito;
    if (cantidadTecnicos === 1) {
      mensajeExito = `El servicio ha sido asignado correctamente a ${tecnicos[0].name}`;
    } else if (cantidadTecnicos > 1) {
      mensajeExito = `El servicio ha sido asignado a los ${cantidadTecnicos} técnicos seleccionados`;
    } else {
      mensajeExito = "El servicio ha sido asignado correctamente";
    }

    mostrarAlerta({
      icon: todasExitosas ? "success" : "warning",
      title: todasExitosas ? "Servicio Asignado" : "Asignación Parcial",
      text: todasExitosas
        ? mensajeExito
        : "El servicio fue asignado a algunos técnicos, pero hubo errores",
      timer: 2500,
      showConfirmButton: false,
    });

    // Solo limpiamos la selección después de una asignación exitosa
    if (todasExitosas) {
      setSelectedTechnicians([]);
    }
  };

  // Determinar si estamos en modo oscuro
  const isDarkMode = document.body.classList.contains("dark-theme");

  return (
    <div
      className="servicio-card"
      onClick={handleClick}
      style={{
        backgroundColor: isDarkMode ? "#2c2e35" : "#ffffff",
        borderColor: "#c5f198",
      }}
    >
      <div className="servicio-header" style={{ color: "#004122" }}>
        <div className="servicio-nombre">
          {formatServiceName(servicio.serviceType)}
        </div>
        <div
          className="servicio-estado pendiente"
          style={{
            backgroundColor: isDarkMode ? "#eab308" : "#FDD835",
            color: "#333",
          }}
        >
          Pendiente
        </div>
      </div>
      <div
        className="servicio-detalles"
        style={{ color: isDarkMode ? "#e0e0e0" : "#555" }}
      >
        <div className="cliente-info">
          <i className="fas fa-user"></i> {servicio.clientName}
        </div>
        <div className="direccion-info">
          <i className="fas fa-map-marker-alt"></i> {servicio.address}
        </div>
      </div>
      <div className="servicio-acciones">
        <div className="acciones-grupo">
          <button
            className="asignar-servicio"
            onClick={(e) => {
              e.stopPropagation();
              handleAsignar();
            }}
            title="Asignar servicio"
          >
            <i className="fas fa-calendar-plus"></i>
          </button>
          <button
            className="ver-detalles"
            onClick={(e) => {
              e.stopPropagation();
              handleClick();
            }}
            title="Ver detalles"
          >
            <i className="fas fa-info-circle"></i>
          </button>
          <button
            className="eliminar-servicio"
            onClick={(e) => {
              e.stopPropagation();
              onEliminar();
            }}
            title="Eliminar servicio"
          >
            <i className="fas fa-times"></i>
          </button>
        </div>
      </div>
    </div>
  );
};

export default ServicioCard;
